# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import client_api_pb2 as client__api__pb2
import common_structs_pb2 as common__structs__pb2


class PubSubApiStub(object):
  """The definition of API exposed by Sidecar.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/swir_public.PubSubApi/Publish',
        request_serializer=client__api__pb2.PublishRequest.SerializeToString,
        response_deserializer=client__api__pb2.PublishResponse.FromString,
        )
    self.PublishBiStream = channel.stream_stream(
        '/swir_public.PubSubApi/PublishBiStream',
        request_serializer=client__api__pb2.PublishRequest.SerializeToString,
        response_deserializer=client__api__pb2.PublishResponse.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/swir_public.PubSubApi/Subscribe',
        request_serializer=client__api__pb2.SubscribeRequest.SerializeToString,
        response_deserializer=client__api__pb2.SubscribeResponse.FromString,
        )


class PubSubApiServicer(object):
  """The definition of API exposed by Sidecar.
  """

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PublishBiStream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PubSubApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=client__api__pb2.PublishRequest.FromString,
          response_serializer=client__api__pb2.PublishResponse.SerializeToString,
      ),
      'PublishBiStream': grpc.stream_stream_rpc_method_handler(
          servicer.PublishBiStream,
          request_deserializer=client__api__pb2.PublishRequest.FromString,
          response_serializer=client__api__pb2.PublishResponse.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=client__api__pb2.SubscribeRequest.FromString,
          response_serializer=client__api__pb2.SubscribeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'swir_public.PubSubApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PersistenceApiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Store = channel.unary_unary(
        '/swir_public.PersistenceApi/Store',
        request_serializer=client__api__pb2.StoreRequest.SerializeToString,
        response_deserializer=client__api__pb2.StoreResponse.FromString,
        )
    self.Retrieve = channel.unary_unary(
        '/swir_public.PersistenceApi/Retrieve',
        request_serializer=client__api__pb2.RetrieveRequest.SerializeToString,
        response_deserializer=client__api__pb2.RetrieveResponse.FromString,
        )
    self.Delete = channel.unary_unary(
        '/swir_public.PersistenceApi/Delete',
        request_serializer=client__api__pb2.DeleteRequest.SerializeToString,
        response_deserializer=client__api__pb2.DeleteResponse.FromString,
        )


class PersistenceApiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Store(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Retrieve(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PersistenceApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Store': grpc.unary_unary_rpc_method_handler(
          servicer.Store,
          request_deserializer=client__api__pb2.StoreRequest.FromString,
          response_serializer=client__api__pb2.StoreResponse.SerializeToString,
      ),
      'Retrieve': grpc.unary_unary_rpc_method_handler(
          servicer.Retrieve,
          request_deserializer=client__api__pb2.RetrieveRequest.FromString,
          response_serializer=client__api__pb2.RetrieveResponse.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=client__api__pb2.DeleteRequest.FromString,
          response_serializer=client__api__pb2.DeleteResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'swir_public.PersistenceApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ServiceInvocationApiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Invoke = channel.unary_unary(
        '/swir_public.ServiceInvocationApi/Invoke',
        request_serializer=common__structs__pb2.InvokeRequest.SerializeToString,
        response_deserializer=common__structs__pb2.InvokeResponse.FromString,
        )


class ServiceInvocationApiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Invoke(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServiceInvocationApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Invoke': grpc.unary_unary_rpc_method_handler(
          servicer.Invoke,
          request_deserializer=common__structs__pb2.InvokeRequest.FromString,
          response_serializer=common__structs__pb2.InvokeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'swir_public.ServiceInvocationApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
